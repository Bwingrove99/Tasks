trueMean1 <- 5
trueSD1 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
population1 <- rnorm(1e6, trueMean2, trueSD2)
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- sample(population1 , Size)
Size <-50
Sample1 <- sample(population1 , Size)
Sample2 <- sample(population2 , Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandpa <- makeFounder("grandma_da")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length( grep("mom", Focus))/ length(Focus)
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)
sibling_01<-makeBaby(Brenda, Alan)
ToSib <- length(intersect( Focus, Sibling_01 ))/ length( Focus )
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)
Sibling_01<-makeBaby(Brenda, Alan)
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))
quartile(ManySiblings)
Quartile(ManySiblings)
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p)  {
aa<-p^2
ab<-2*p*(1-p)
bb<-(1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p<- seq(from = 0, to = 1, by = 0.01)
GenoFreq<- t(sapply(p, HWE))
lines(p, genoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Pop<- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop<-simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
install.packages(learnPopGen)
library(learnPopGen)help(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes<-5:50
Samples<- rep(PopSizes, 5)
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line<- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
Size <-50#
Sample1 <- sample(population1 , Size)#
Sample2 <- sample(population2 , Size)#
boxplot(Sample1, Sample2)#
source("http://jonsmitchell.com/code/simFxn04.R")#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
Focus <- makeBaby(Brenda, Alan)#
ToMom <- length( grep("mom", Focus))/ length(Focus)#
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)#
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)#
Sibling_01<-makeBaby(Brenda, Alan)#
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)#
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))#
quantile(ManySiblings)#
mean(ManySiblings)#
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
HWE <- function(p)  {#
	aa<-p^2#
	ab<-2*p*(1-p)#
	bb<-(1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
HWE(0.5)#
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
p<- seq(from = 0, to = 1, by = 0.01)#
GenoFreq<- t(sapply(p, HWE))#
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")#
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")#
Pop<- simPop(500)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")#
Pop<-simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")#
install.packages("learnPopGen")#
library(learnPopGen)#
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)#
PopSizes<-5:50#
Samples<- rep(PopSizes, 5)#
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))#
Line<- lm(tExt ~ Samples)#
summary(Line)#
Line$coef#
plot(Samples, tExt)#
abline(Line)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
Size <-50#
Sample1 <- sample(population1 , Size)#
Sample2 <- sample(population2 , Size)#
# yes they are different and so were the populations #
boxplot(Sample1, Sample2)#
source("http://jonsmitchell.com/code/simFxn04.R")#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
Focus <- makeBaby(Brenda, Alan)#
# Should be 50% or .5#
ToMom <- length( grep("mom", Focus))/ length(Focus)#
# 0.3076 and .1924. Doesnâ€™t match my prediction#
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)#
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)#
# Focus inst equal with relation to the maternal grandparents and the paternal grandparents. Average relatedness was 0.25. #
Sibling_01<-makeBaby(Brenda, Alan)#
# I would expect 50%, a ctual was 47%.#
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)#
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))#
#Shares different numbers of genes with each 1000 siblings.#
quantile(ManySiblings)#
mean(ManySiblings)#
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
HWE <- function(p)  {#
	aa<-p^2#
	ab<-2*p*(1-p)#
	bb<-(1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
HWE(0.5)#
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
p<- seq(from = 0, to = 1, by = 0.01)#
GenoFreq<- t(sapply(p, HWE))#
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
# Frequency of aa increases as the frequency of alleles a aincrease in the population. As it decreases, frequency does too. Time is not shown in the plot. Geographical space is not as well.#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")#
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")#
Pop<- simPop(500)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")#
#Does not match the Hardy Weinberg expectation#
Pop<-simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")#
# More points on the graph. #
install.packages("learnPopGen")#
library(learnPopGen)#
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)#
PopSizes<-5:50#
Samples<- rep(PopSizes, 5)#
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))#
Line<- lm(tExt ~ Samples)#
summary(Line)#
Line$coef#
plot(Samples, tExt)#
abline(Line)#
# as population increases, the distance from the line increases. Population size increases, there is more extinction for alleles.
source("http://jonsmitchell.com/code/fxn05.R")
Pop1<- simPop(Popsize = 50, n Generations = 100, initial _p = 0.5, h =1, s = 0)
Pop1<- simPop(Popsize = 50, nGenerations = 100, initial _p = 0.5, h =1, s = 0)
Pop1<- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h =1, s = 0)
plot(1:nrow (Pop1), Pop1[,1], ylim=c(0, 1), type = "1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1:nrow (Pop1), Pop1[,1], ylim=c(0, 1), type ='1', xlab="generation", ylab="allele freq.", lwd=2)
plot (1:nrow (Pop1), Pop1 [,1], ylim=c (0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2] lwd=2, col='red')
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p=0.5, h = 1, s = 0 )
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum((( Expectation- Obsereved ) ^2) / Expectation )
Chisq <- sum(((Expectation-Obsereved)^2)/Expectation)
Chisq <- sum(((Expectation-Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beeside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts<- results[,c("yellow","red","green","blue","black","tan")]
backgrounds <- c("White" ,"Red" ,"Yellow" ,"Green" ,"Blue" ,"Black")
backgroundCol <- c ("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- meaan(Chisqs)
Avg <- mean(Chisqs)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length( which( Chisqs > 11.70))/length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par(las=1, mar=c(4, 4, 1, 1), mgp=c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
Data <- Chisqs[which(results[,3] == i)]
{
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter +1
}
for (i in backgrounds){
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter +1
}
abline( v = 11.70, lty=2, lwd=2, col='black')
#no
Simulation <- simDraaws(10000)
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v=11.70, lty=2, lwd=2)
Fit<- c(1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation2<- simDraws(1e4, w=Fit)
addHist(y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=simulation3, Color=rgb(0,0,0,0.25))
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit)<- 1:6
Simulation4 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- simDraws(1e4, w=Fit)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
Fit<- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit)<- 1:6
Simulation6<- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel.sim")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
source("http://jonsmitchell.com/code/fxn05.R")#
Pop1<- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h =1, s = 0)#
plot (1:nrow (Pop1), Pop1 [,1], ylim=c (0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)#
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')#
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")#
plotFit( nruns = 10, n = 50, ngens = 100, init_p=0.5, h = 1, s = 0 )#
Expectation <- c(10, 10, 10, 10)#
Observed <- c(15, 15, 5, 5)#
Chisq <- sum(((Expectation-Observed)^2)/Expectation)#
barplot(rbind(Expectation, Observed), beeside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))#
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)#
counts<- results[,c("yellow","red","green","blue","black","tan")]#
backgrounds <- c("White" ,"Red" ,"Yellow" ,"Green" ,"Blue" ,"Black")#
backgroundCol <- c ("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")#
calcChi(counts[1,])#
Chisqs <- apply(counts, 1, calcChi)#
plotChis(counts)#
#not very even#
#Chi-squared is very even when it is low#
Avg <- mean(Chisqs)#
#they look similar#
# chi square differs by background in my opinion#
backgroundAvgs <- tapply(Chisqs, results[,3], mean)#
propSig <- length( which( Chisqs > 11.70))/length(Chisqs)#
percSig <- round(100 * propSig)#
#i think that it could be a issue#
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)#
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")#
par(las=1, mar=c(4, 4, 1, 1), mgp=c(2, 0.5, 0), tck = -0.01, cex.axis=1)#
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")#
axis(2, at = 1:length(backgrounds), labels = backgrounds)#
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)#
counter <- 1#
for (i in backgrounds){#
Data <- Chisqs[which(results[,3] == i)]#
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])#
counter <- counter +1#
}#
abline( v = 11.70, lty=2, lwd=2, col='black')#
#no#
Simulation <- simDraws(10000)#
addHist(Y=7, Dat=Simulation, Color="lightgray")#
mtext(side=2, at=7, line=0, "simulated")#
abline(v=11.70, lty=2, lwd=2)#
Fit<- c(1, 1, 1, 1, 1, 1)#
names(Fit)<- 1:6#
Simulation2<- simDraws(1e4, w=Fit)#
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))#
Fit <- c(0.1, 1, 1, 1, 1, 1)#
names(Fit)<- 1:6#
Simulation3 <- simDraws(1e4, w=Fit)#
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))#
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)#
names(Fit)<- 1:6#
Simulation4 <- simDraws(1e4, w=Fit)#
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))#
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)#
names(Fit) <- 1:6#
Simulation5 <- simDraws(1e4, w=Fit)#
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))#
Fit<- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)#
names(Fit)<- 1:6#
Simulation6<- simDraws(1e4, w=Fit)#
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))#
mtext(side=2, at=8, line=0, "sel.sim")#
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)#
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
install.packages("learnPopGen")
install.packages("coala")
install.packages("phytools")
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2)
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) {
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
model<- coala_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
install.packages("learnPopGen")#
install.packages("coala")#
install.packages("phytools")#
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +#
feat_mutation(10) +#
feat_recombination(10) +#
sumstat_trees() +#
sumstat_nucleotide_div()
library()
library("learnPopGen")
library("coala")
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +#
feat_mutation(10) +#
feat_recombination(10) +#
sumstat_trees() +#
sumstat_nucleotide_div()
stats<- simulate(model, nsim = 1)
Diversity<- stats$pi
Nloci<- length(stats$trees)
t1<- read.tree(text=stats$trees[[1]][1])
t1<- read.tree(text=stats$trees[[1]][1]) +
plot(t1) +
axisPhylo()
install.packages("learnPopGen")#
install.packages("coala")#
install.packages("phytools")#
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +#
feat_mutation(10) +#
feat_recombination(10) +#
sumstat_trees() +#
sumstat_nucleotide_div()#
stats<- simulate(model, nsim = 1)#
Diversity<- stats$pi#
Nloci<- length(stats$trees)#
t1<- read.tree(text=stats$trees[[1]][1])
install.packages("learnPopGen")#
library("learnPopGen")#
install.packages("coala")#
library("coala")#
install.packages("phytools")#
library("phytools")
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats<- simulate(model, nsim = 1)
Diversity<- stats$pi
Nloci<- length(stats$trees)
t1<- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Age1 <- max(nodeHeights(t1))
t2<- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
t1_1 <- read.tree(text=stats$trees [[1]][1])
t1_2 <- read.tree(text=stats$trees [[1]][2])
compare.chronograms(t1, t2)
compare.cronograms(t1_1, t1_2)
compare.chronograms(t1_1, t1_2)
(locus in 1:Nloci) {
for (locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
par(mfrow=c(1,1))
densityTree(outPhy)
model3 <- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample.int(100, 1))) +
sumstat_nucleotide_div()
mean_pi <- sapply(stats, function(x) mean(x$pi))
mean_pi <- sapply(stats, function(x), mean(x$pi))
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta<- sapply(stats, function(x) x$pars [["theta"]])
coalescent.plot(n=5, ngen=30, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)
coalescent.plot(n=12, ngen=30, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)
coalescent.plot(n=10, ngen=30, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)
coalescent.plot(n=5, ngen=35, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)
coalescent.plot(n=5, ngen=45, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)
coalescent.plot(n=5, ngen=50, col.order="alternating")
coalescent.plot(n=5, ngen=49, col.order="alternating")
coalescent.plot(n=5, ngen=5, col.order="alternating")
#49 begins fixation at 10
#5 offspring
#Large impact because each simulation was different
#In generation 0
install.packages("learnPopGen")#
library("learnPopGen")#
install.packages("coala")#
library("coala")#
install.packages("phytools")#
library("phytools")#
model<- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +#
feat_mutation(10) +#
feat_recombination(10) +#
sumstat_trees() +#
sumstat_nucleotide_div()#
stats<- simulate(model, nsim = 1)#
Diversity<- stats$pi#
Nloci<- length(stats$trees)#
t1<- read.tree(text=stats$trees[[1]][1])#
plot(t1)#
axisPhylo()#
Age1 <- max(nodeHeights(t1))#
t2<- read.tree(text=stats$trees[[2]][1])#
plot(t2)#
axisPhylo()#
par(mfrow=c(1,2))#
plot(t1)#
axisPhylo()#
plot(t2)#
axisPhylo()#
compare.chronograms(t1, t2)#
t1_1 <- read.tree(text=stats$trees [[1]][1])#
t1_2 <- read.tree(text=stats$trees [[1]][2])#
compare.chronograms(t1_1, t1_2)#
for (locus in 1:Nloci) {#
	ntrees <- length(stats$trees[[locus]])#
	for (n in 1:ntrees) {#
		if (locus == 1 && n == 1) {#
			outPhy <- read.tree(text=stats$trees[[locus]][n])#
			}#
			else {#
				outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))#
				}#
			}#
		}		#
par(mfrow=c(1,1))#
densityTree(outPhy)#
model3 <- coal_model(10, 50) +#
feat_mutation(par_prior("theta", sample.int(100, 1))) +#
sumstat_nucleotide_div()#
stats <- simulate(model3, nsim = 40)#
mean_pi <- sapply(stats, function(x) mean(x$pi))#
theta<- sapply(stats, function(x) x$pars [["theta"]])#
#
coalescent.plot(n=5, ngen=30, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)#
coalescent.plot(n=12, ngen=30, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)#
coalescent.plot(n=10, ngen=30, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)#
#The first simulation started with 5.  The next started with 12.  The last started with 10. #
coalescent.plot(n=5, ngen=35, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test) #
coalescent.plot(n=5, ngen=45, col.order="alternating")#
test <-coalescent.plot()#
print(test)#
plot(test)#
coalescent.plot(n=5, ngen=50, col.order="alternating")#
coalescent.plot(n=5, ngen=49, col.order="alternating")#
coalescent.plot(n=5, ngen=5, col.order="alternating")#
#49 begins fixation at 10#
#5 offspring#
#Large impact because each simulation was different#
#In generation 0
~/Desktop/Rplot3.pdf
~/Desktop/Rplot2.pdf
~/Desktop/Rplot1.pdf
#I hypothesis that female seal pups will weigh more than the male seal pups
x<- read.table(". ~/Downloads/Projects", sep="\t")
x<- read.table(" ~/Downloads/Projects", sep="\t")
x<- read.table(" ~/Downloads/Projects")
x<- read.table(" ~/Evolution/Tasks/Projects")
x<- read.table(" ~/Evolution/Tasks/Project")
source("https://jonsmitchell.com/code/reformatData07.R")
