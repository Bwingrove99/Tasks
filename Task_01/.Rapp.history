y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-z-1
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+C(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
z*2+1000
my_div
library(swirl)
swirl()
getwd()
ls(computer phone water table chair)
ls(computer)
ls(water)
ls(in)
ls(chair)
ls()
x<-9
ls()
dir()
?list.files.
?list.files
args()
args(list.files())
args(x)
args(list.files)
old.dir<-args(list.files)
old.dir<-getwd()
dir.create()
dir.create(testdir)
testdir<-dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
"mytest.R"
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest")
file.rename("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R") to "mytest2.R"
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3")
Recursive
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq<- seq(5, 10, length=30)
length(30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2) each = 10)
rep(c(0, 1, 2), each = 10)
`==`
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5=/7
5!=7
5 !TRUE 7
5 !FALSE 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
INTS
ints
ints>5
which(7)
which(ints > 7)
any(ints<0)
all(ints>0)
sys.date()
Sys.Date()
mean(c(2, 4, 5))
submit()
x
mean(c(2, 4, 5, NA))
w
mean(c(2, 4, 5))
submit()
submit(x)
mean(c(2, 4, 5))
NA
mean(c(2, 4, NA))
my_mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram()
submit()
mad_libs(adjective = "", place = "", noun = "")
submit()
'I' %p% 'love' %p% 'R!'
submit()
'I' %p% 'love' %p% 'R!'
data(cars)
?cars
head()
head(x)
head(cars)
plot(cars)
?plot()
?plot
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping#
| Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
pch = 2
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
trueMean1 <- 5
trueSD1 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
population1 <- rnorm(1e6, trueMean2, trueSD2)
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- sample(population1 , Size)
Size <-50
Sample1 <- sample(population1 , Size)
Sample2 <- sample(population2 , Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandpa <- makeFounder("grandma_da")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length( grep("mom", Focus))/ length(Focus)
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)
sibling_01<-makeBaby(Brenda, Alan)
ToSib <- length(intersect( Focus, Sibling_01 ))/ length( Focus )
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)
Sibling_01<-makeBaby(Brenda, Alan)
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))
quartile(ManySiblings)
Quartile(ManySiblings)
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p)  {
aa<-p^2
ab<-2*p*(1-p)
bb<-(1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p<- seq(from = 0, to = 1, by = 0.01)
GenoFreq<- t(sapply(p, HWE))
lines(p, genoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Pop<- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop<-simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
install.packages(learnPopGen)
library(learnPopGen)help(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes<-5:50
Samples<- rep(PopSizes, 5)
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line<- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
Size <-50#
Sample1 <- sample(population1 , Size)#
Sample2 <- sample(population2 , Size)#
boxplot(Sample1, Sample2)#
source("http://jonsmitchell.com/code/simFxn04.R")#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
Focus <- makeBaby(Brenda, Alan)#
ToMom <- length( grep("mom", Focus))/ length(Focus)#
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)#
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)#
Sibling_01<-makeBaby(Brenda, Alan)#
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)#
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))#
quantile(ManySiblings)#
mean(ManySiblings)#
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
HWE <- function(p)  {#
	aa<-p^2#
	ab<-2*p*(1-p)#
	bb<-(1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
HWE(0.5)#
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
p<- seq(from = 0, to = 1, by = 0.01)#
GenoFreq<- t(sapply(p, HWE))#
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")#
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")#
Pop<- simPop(500)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")#
Pop<-simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")#
install.packages("learnPopGen")#
library(learnPopGen)#
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)#
PopSizes<-5:50#
Samples<- rep(PopSizes, 5)#
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))#
Line<- lm(tExt ~ Samples)#
summary(Line)#
Line$coef#
plot(Samples, tExt)#
abline(Line)
