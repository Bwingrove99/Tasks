`==`
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5=/7
5!=7
5 !TRUE 7
5 !FALSE 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
INTS
ints
ints>5
which(7)
which(ints > 7)
any(ints<0)
all(ints>0)
sys.date()
Sys.Date()
mean(c(2, 4, 5))
submit()
x
mean(c(2, 4, 5, NA))
w
mean(c(2, 4, 5))
submit()
submit(x)
mean(c(2, 4, 5))
NA
mean(c(2, 4, NA))
my_mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram()
submit()
mad_libs(adjective = "", place = "", noun = "")
submit()
'I' %p% 'love' %p% 'R!'
submit()
'I' %p% 'love' %p% 'R!'
data(cars)
?cars
head()
head(x)
head(cars)
plot(cars)
?plot()
?plot
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping#
| Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
pch = 2
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
trueMean1 <- 5
trueSD1 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
population1 <- rnorm(1e6, trueMean2, trueSD2)
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- sample(population1 , Size)
Size <-50
Sample1 <- sample(population1 , Size)
Sample2 <- sample(population2 , Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandpa <- makeFounder("grandma_da")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length( grep("mom", Focus))/ length(Focus)
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)
sibling_01<-makeBaby(Brenda, Alan)
ToSib <- length(intersect( Focus, Sibling_01 ))/ length( Focus )
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)
Sibling_01<-makeBaby(Brenda, Alan)
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))
quartile(ManySiblings)
Quartile(ManySiblings)
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p)  {
aa<-p^2
ab<-2*p*(1-p)
bb<-(1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p<- seq(from = 0, to = 1, by = 0.01)
GenoFreq<- t(sapply(p, HWE))
lines(p, genoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Pop<- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop<-simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
install.packages(learnPopGen)
library(learnPopGen)help(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes<-5:50
Samples<- rep(PopSizes, 5)
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line<- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
Size <-50#
Sample1 <- sample(population1 , Size)#
Sample2 <- sample(population2 , Size)#
boxplot(Sample1, Sample2)#
source("http://jonsmitchell.com/code/simFxn04.R")#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
Focus <- makeBaby(Brenda, Alan)#
ToMom <- length( grep("mom", Focus))/ length(Focus)#
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)#
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)#
Sibling_01<-makeBaby(Brenda, Alan)#
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)#
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))#
quantile(ManySiblings)#
mean(ManySiblings)#
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
HWE <- function(p)  {#
	aa<-p^2#
	ab<-2*p*(1-p)#
	bb<-(1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
HWE(0.5)#
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
p<- seq(from = 0, to = 1, by = 0.01)#
GenoFreq<- t(sapply(p, HWE))#
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")#
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")#
Pop<- simPop(500)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")#
Pop<-simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")#
install.packages("learnPopGen")#
library(learnPopGen)#
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)#
PopSizes<-5:50#
Samples<- rep(PopSizes, 5)#
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))#
Line<- lm(tExt ~ Samples)#
summary(Line)#
Line$coef#
plot(Samples, tExt)#
abline(Line)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
Size <-50#
Sample1 <- sample(population1 , Size)#
Sample2 <- sample(population2 , Size)#
# yes they are different and so were the populations #
boxplot(Sample1, Sample2)#
source("http://jonsmitchell.com/code/simFxn04.R")#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
Focus <- makeBaby(Brenda, Alan)#
# Should be 50% or .5#
ToMom <- length( grep("mom", Focus))/ length(Focus)#
# 0.3076 and .1924. Doesnâ€™t match my prediction#
ToMomMom<- length( grep( "grandma_mom", Focus))/ length(Focus)#
ToMomDad <- length( grep( "granpa_mom", Focus))/ length(Focus)#
# Focus inst equal with relation to the maternal grandparents and the paternal grandparents. Average relatedness was 0.25. #
Sibling_01<-makeBaby(Brenda, Alan)#
# I would expect 50%, a ctual was 47%.#
ToSib <- length(intersect( Focus, Sibling_01))/ length(Focus)#
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus))#
#Shares different numbers of genes with each 1000 siblings.#
quantile(ManySiblings)#
mean(ManySiblings)#
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
HWE <- function(p)  {#
	aa<-p^2#
	ab<-2*p*(1-p)#
	bb<-(1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
HWE(0.5)#
plot(1, 1, type="n", xlim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
p<- seq(from = 0, to = 1, by = 0.01)#
GenoFreq<- t(sapply(p, HWE))#
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
# Frequency of aa increases as the frequency of alleles a aincrease in the population. As it decreases, frequency does too. Time is not shown in the plot. Geographical space is not as well.#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")#
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")#
Pop<- simPop(500)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")#
#Does not match the Hardy Weinberg expectation#
Pop<-simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")#
# More points on the graph. #
install.packages("learnPopGen")#
library(learnPopGen)#
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)#
PopSizes<-5:50#
Samples<- rep(PopSizes, 5)#
tExt<- sapply(Samples, function(x) nrow(simPop(x, 500)))#
Line<- lm(tExt ~ Samples)#
summary(Line)#
Line$coef#
plot(Samples, tExt)#
abline(Line)#
# as population increases, the distance from the line increases. Population size increases, there is more extinction for alleles.
source("http://jonsmitchell.com/code/fxn05.R")
Pop1<- simPop(Popsize = 50, n Generations = 100, initial _p = 0.5, h =1, s = 0)
Pop1<- simPop(Popsize = 50, nGenerations = 100, initial _p = 0.5, h =1, s = 0)
Pop1<- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h =1, s = 0)
plot(1:nrow (Pop1), Pop1[,1], ylim=c(0, 1), type = "1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1:nrow (Pop1), Pop1[,1], ylim=c(0, 1), type ='1', xlab="generation", ylab="allele freq.", lwd=2)
plot (1:nrow (Pop1), Pop1 [,1], ylim=c (0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2] lwd=2, col='red')
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit( nruns = 10, n = 50, ngens = 100, init_p=0.5, h = 1, s = 0 )
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum((( Expectation- Obsereved ) ^2) / Expectation )
Chisq <- sum(((Expectation-Obsereved)^2)/Expectation)
Chisq <- sum(((Expectation-Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beeside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts<- results[,c("yellow","red","green","blue","black","tan")]
backgrounds <- c("White" ,"Red" ,"Yellow" ,"Green" ,"Blue" ,"Black")
backgroundCol <- c ("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- meaan(Chisqs)
Avg <- mean(Chisqs)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length( which( Chisqs > 11.70))/length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist(Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par(las=1, mar=c(4, 4, 1, 1), mgp=c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
Data <- Chisqs[which(results[,3] == i)]
{
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter +1
}
for (i in backgrounds){
Data <- Chisqs[which(results[,3] == i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter +1
}
abline( v = 11.70, lty=2, lwd=2, col='black')
#no
Simulation <- simDraaws(10000)
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v=11.70, lty=2, lwd=2)
Fit<- c(1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation2<- simDraws(1e4, w=Fit)
addHist(y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=simulation3, Color=rgb(0,0,0,0.25))
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit)<- 1:6
Simulation4 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- simDraws(1e4, w=Fit)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
Fit<- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit)<- 1:6
Simulation6<- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel.sim")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
